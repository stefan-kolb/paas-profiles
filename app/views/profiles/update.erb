<link href="../../css/bootstrap-select.min.css" rel="stylesheet"/>

<div id='top' class='container' style=" margin-top: 10px; padding-bottom: 20px;">
<h3>Runtimes</h3>
  <table class="tableFormatting">
    <tr>
      <th>Language</th>
      <th>Versions</th>
    </tr>
    <tbody data-bind="foreach: runtimes">
      <tr>
        <td>
          <input data-bind='value: language' />
          <div><a href='#' data-bind='click: $root.removeRuntime'>Delete</a></div>
        </td>
        <td>
          <table>
            <tbody data-bind="foreach: versions">
              <tr>
                <td><input data-bind='value: item' /></td>
                <td><a href='#' data-bind='click: $root.removeVersion'>Delete</a></td>
              </tr>
            </tbody>
          </table>
          <a href='#' data-bind='click: $root.addVersion'>Add version</a>
        </td>
      </tr>
    </tbody>
  </table>
  <button data-bind='click: addVersion'>Add a runtime</button>
  <button id="debug">Debug</button>
</div>

<style type="text/css">
.tableFormatting TR { vertical-align: top; }
.tableFormatting TD A { font-size: 0.9em; text-decoration: none; }
.tableFormatting td input { width: 12em; }

li { list-style-type: disc; margin-left: 20px; }
</style>

<script src="../../js/bootstrap-select.min.js"></script>
<script src="../../js/knockout-3.4.1.js"></script>

<script>
  var initialData = [
    { language: "Java", versions: [
        { item: "1.7"},
        { item: "1.8"}]
    },
    { language: "Ruby", versions: [
        { item: "2"},
        { item: "3"}]
    }
  ];
 
  var Model = function(runtimes) {
    var self = this;
    self.runtimes = ko.observableArray(ko.utils.arrayMap(runtimes, function(runtime) {
        return { language: runtime.language, versions: ko.observableArray(runtime.versions) };
    }));
 
    self.addRuntime = function() {
        self.runtimes.push({
            language: "",
            versions: ko.observableArray()
        });
    };
 
    self.removeRuntime = function(runtime) {
        self.runtimes.remove(runtime);
    };
 
    self.addVersion = function(runtime) {
        runtime.versions.push({
            item: ""
        });
    };
 
    self.removeVersion = function(version) {
        $.each(self.runtimes(), function() { this.versions.remove(version) })
    };
 
    self.save = function() {
        self.lastSavedJson(JSON.stringify(ko.toJS(self.runtimes), null, 2));
    };
 
    self.lastSavedJson = ko.observable("")
  };

$(document).ready(function () {
  var vendor;
  $.getJSON('/api/vendors/<%=  @profile['name'].gsub(/[^a-z]/i, '_') %>').done(function (data) {
      vendor = data;
      console.log(vendor);
      console.log(vendor.runtimes);
      console.log(initialData);
      ko.applyBindings(new Model(initialData));
    });

  $('#debug').click(function(){
    console.log(initialData);
  });
});
 
</script>